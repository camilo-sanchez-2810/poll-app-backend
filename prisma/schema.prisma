generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model options {
  id      String  @id @default(uuid()) @db.Uuid
  title   String? @db.VarChar(50)
  poll_id String  @db.Uuid
  polls   polls   @relation(fields: [poll_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_poll")
  votes   votes[]
}

model polls {
  id          String    @id @default(uuid()) @db.Uuid
  title       String    @db.VarChar(50)
  description String?   @db.VarChar(200)
  from_date   DateTime  @default(now()) @db.Timestamp(6)
  to_date     DateTime  @db.Timestamp(6)
  img_path    String?   @db.VarChar(30)
  options     options[]
  votes       votes[]
}

model users {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique @db.VarChar(50)
  password  String?  @db.VarChar(20)
  name      String   @db.VarChar(20)
  last_name String   @db.VarChar(20)
  active    Boolean? @default(true)
  is_admin  Boolean? @default(false)
  votes     votes[]
}

model votes {
  id        String  @id @default(uuid()) @db.Uuid
  user_id   String  @db.Uuid
  poll_id   String  @db.Uuid
  option_id String  @db.Uuid
  options   options @relation(fields: [option_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_option")
  polls     polls   @relation(fields: [poll_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_poll")
  users     users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")
}
